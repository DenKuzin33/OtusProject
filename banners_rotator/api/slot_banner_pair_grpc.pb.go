// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: slot_banner_pair.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BannersRotator_AddBannerToSlot_FullMethodName      = "/proto.BannersRotator/AddBannerToSlot"
	BannersRotator_RemoveBannerFromSlot_FullMethodName = "/proto.BannersRotator/RemoveBannerFromSlot"
)

// BannersRotatorClient is the client API for BannersRotator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannersRotatorClient interface {
	AddBannerToSlot(ctx context.Context, in *BannerOperationRequest, opts ...grpc.CallOption) (*BannerOperationResponse, error)
	RemoveBannerFromSlot(ctx context.Context, in *BannerOperationRequest, opts ...grpc.CallOption) (*BannerOperationResponse, error)
}

type bannersRotatorClient struct {
	cc grpc.ClientConnInterface
}

func NewBannersRotatorClient(cc grpc.ClientConnInterface) BannersRotatorClient {
	return &bannersRotatorClient{cc}
}

func (c *bannersRotatorClient) AddBannerToSlot(ctx context.Context, in *BannerOperationRequest, opts ...grpc.CallOption) (*BannerOperationResponse, error) {
	out := new(BannerOperationResponse)
	err := c.cc.Invoke(ctx, BannersRotator_AddBannerToSlot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotatorClient) RemoveBannerFromSlot(ctx context.Context, in *BannerOperationRequest, opts ...grpc.CallOption) (*BannerOperationResponse, error) {
	out := new(BannerOperationResponse)
	err := c.cc.Invoke(ctx, BannersRotator_RemoveBannerFromSlot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannersRotatorServer is the server API for BannersRotator service.
// All implementations must embed UnimplementedBannersRotatorServer
// for forward compatibility
type BannersRotatorServer interface {
	AddBannerToSlot(context.Context, *BannerOperationRequest) (*BannerOperationResponse, error)
	RemoveBannerFromSlot(context.Context, *BannerOperationRequest) (*BannerOperationResponse, error)
	mustEmbedUnimplementedBannersRotatorServer()
}

// UnimplementedBannersRotatorServer must be embedded to have forward compatible implementations.
type UnimplementedBannersRotatorServer struct {
}

func (UnimplementedBannersRotatorServer) AddBannerToSlot(context.Context, *BannerOperationRequest) (*BannerOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBannerToSlot not implemented")
}
func (UnimplementedBannersRotatorServer) RemoveBannerFromSlot(context.Context, *BannerOperationRequest) (*BannerOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBannerFromSlot not implemented")
}
func (UnimplementedBannersRotatorServer) mustEmbedUnimplementedBannersRotatorServer() {}

// UnsafeBannersRotatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannersRotatorServer will
// result in compilation errors.
type UnsafeBannersRotatorServer interface {
	mustEmbedUnimplementedBannersRotatorServer()
}

func RegisterBannersRotatorServer(s grpc.ServiceRegistrar, srv BannersRotatorServer) {
	s.RegisterService(&BannersRotator_ServiceDesc, srv)
}

func _BannersRotator_AddBannerToSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotatorServer).AddBannerToSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannersRotator_AddBannerToSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotatorServer).AddBannerToSlot(ctx, req.(*BannerOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotator_RemoveBannerFromSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotatorServer).RemoveBannerFromSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannersRotator_RemoveBannerFromSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotatorServer).RemoveBannerFromSlot(ctx, req.(*BannerOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BannersRotator_ServiceDesc is the grpc.ServiceDesc for BannersRotator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannersRotator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BannersRotator",
	HandlerType: (*BannersRotatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBannerToSlot",
			Handler:    _BannersRotator_AddBannerToSlot_Handler,
		},
		{
			MethodName: "RemoveBannerFromSlot",
			Handler:    _BannersRotator_RemoveBannerFromSlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slot_banner_pair.proto",
}
